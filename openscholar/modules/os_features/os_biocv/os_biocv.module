<?php
// $Id$

/**
 * @file
 * Code for the OS Bio/CV feature.
 *
 * @see ./profiles/openscholar/modules/os/modules/os_boxes/plugins/os_boxes_bio/os_boxes_bio.inc
 */

include_once 'os_biocv.features.inc';

/**
 * Implements hook_os_app_info().
 */
function os_biocv_os_app_info() {
  $apps = array();

  $apps['os_biocv'] = array(
    'path' => 'biocv',
    'nodetypes' => array(
      'bio',
      'cv',
    ),
    'browse_pages' => array(
      'bio' => FALSE,
      'cv' => FALSE,
    ),
  );

  return $apps;
}

/**
 * Implements hook_menu().
 */
function os_biocv_menu() {
  $items = array();
  $items['biocv'] = array(
    'title' => 'Bio',
    'page callback' => '_os_biocv_bio_page_contents',
    'access callback' => 'spaces_access_feature',
    'access arguments' => array('view', 'os_biocv'),
    'menu_name' => 'primary-menu',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['biocv/bio'] = array(
    'title' => 'Biography',
    'page callback' => '_os_biocv_bio_page_contents',
    'access callback' => '_os_biocv_show_local_tasks',
    // Add to features menu. If added to "primary-menu", it appears in CP.
    'menu_name' => 'features',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['biocv/cv'] = array(
    'title' => 'Curriculum Vitae',
    'page callback' => '_os_biocv_cv_page_contents',
    'access callback' => '_os_biocv_show_local_tasks',
    // Add to features menu. If added to "primary-menu", it appears in CP.
    'menu_name' => 'features',
    'type' => MENU_LOCAL_TASK,
  );
  // Named like 'features/$feature_name' by features/spaces convention.
  $items['features/os_biocv'] = array(
    'title' => 'Bio/CV Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os_biocv_settings'),
    'access callback' => '_os_biocv_access_admin',
    'type' => MENU_CALLBACK,
    'file' => 'os_biocv.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_form_alter() for cv_node_form
 */
function os_biocv_form_cv_node_form_alter(&$form, &$form_state, $form_id) {
  $settings_link = l(t('Bio/CV settings'), 'features/os_biocv');
  $form['field_biocv_pdf_upload'][LANGUAGE_NONE][0]['#media_options']['global']['override_extensions'] = true;
}

/**
 * Implements hook_form_FORM_ID_form_alter() for bio_node_form
 */
function os_biocv_form_bio_node_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = '_os_biocv_node_form_submit';
}

/**
 * Form submit callback; redirects to "biocv".
 */
function _os_biocv_node_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'biocv';
}

/**
 * Implements hook_node_access().
 *
 * Denies users from creating more than 1 Bio or CV node.
 * Site-wide for single tenant, or per-vsite on multi-tenant.
 */
function os_biocv_node_access($node, $op, $account) {
  if ($op !== 'create') {
    return NODE_ACCESS_IGNORE;
  }
  $type = is_string($node) ? $node : $node->type;
  if (!in_array($type, array('bio', 'cv'))) {
    return NODE_ACCESS_IGNORE;
  }
  $node_exists = _os_biocv_get_first_node($type);
  if ($node_exists === FALSE) {
    return NODE_ACCESS_IGNORE;
  }
  return NODE_ACCESS_DENY;
}

/**
 * Implements hook_process_hook() for node.
 *
 * Removes the username from $submitted info on blog type nodes.
 */
function os_biocv_process_node(&$vars) {
  if ($vars['type'] == 'cv' && $vars['view_mode'] != 'title') {
    // Build the submitted variable used by default in node templates
    $last_updated = format_date($vars['changed'], 'custom', 'F j, Y');
    $title_suffix = '<p class="submitted">' . t('(Last updated: @time)', array('@time' => $last_updated)) . '</p>';

    if ($vars['view_mode'] == 'slide_teaser') {
      $vars['content']['body'][0]['#markup'] .= $title_suffix;
    } else {
      $vars['title_suffix'] = $title_suffix;
    }
  }

  elseif ($vars['type'] == 'bio' && empty($vars['show_title']) && !in_array($vars['view_mode'], array('title', 'slide_teaser'))) {
    // hides the title
    $vars['page'] = true;
  }
}

/**
 * Implements hook_os_add_new_links_alter()
 *
 * Removes "Add new > Bio" link from "Add new" contextual links if Bio exists.
 */
function os_biocv_os_add_new_links_alter(&$links) {
  if (!isset($links['bio']) && !isset($links['cv'])) {
    return;
  }
  $bio_exists = _os_biocv_bio_exists();
  if ($bio_exists && isset($links['bio'])) {
    unset($links['bio']);
  }
  $cv_exists = _os_biocv_cv_exists();
  if ($cv_exists && isset($links['cv'])) {
    unset($links['cv']);
  }
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function os_biocv_vsite_og_node_type_info() {
  return array(
    'bio' => 'group content',
    'cv' => 'group content',
  );
}

/**
 * Implements hook_vsite_admin_link().
 *
 * Adds the "(config-gear) > Edit CV" link when admin view Bio node.
 */
function os_biocv_vsite_admin_link($type, $object) {
  $links = array();

  // Only proceeds for admin links when viewing Bio and CV exists.
  $cv_node = os_biocv_get_cv_node();
  if (!($type == 'node' && $object->type == 'bio' && $cv_node !== FALSE)) {
    return $links;
  }

  // Only proceeds if the current user can access the CV edit page.
  $path = "node/{$cv_node->nid}/edit";
  $item = menu_get_item($path);
  if (!($item && $item['access'])) {
    return $links;
  }

  $links['node-edit-cv'] = array(
    'title' => t('Edit CV'),
    'href' => $path,
    'attributes' => array(
      'class' => 'icon-edit',
    ),
    'query' => array(
      'destination' => $_GET['q'],
    ),
  );

  return $links;
}

/**
 * Finds the Bio of the user with the lowest NID value, FALSE if none.
 */
function os_biocv_get_bio_node() {
  return _os_biocv_get_first_node('bio');
}

/**
 * Finds the CV of the user with the lowest NID value, FALSE if none.
 */
function os_biocv_get_cv_node() {
  return _os_biocv_get_first_node('cv');
}

/**
 * Finds the node of the user with the lowest NID value of the given type.
 *
 * @return bool|object
 *   A Drupal node object in the current space, if found; otherwise FALSE.
 */
function _os_biocv_get_first_node($type = 'bio') {
  // Note that this OSNodeFieldQuery will filter the current space if
  // vsite module is enabled. Otherwise it leaves out that condition and will
  // tell us whether any published bio nodes exist on this installation at all.
  // In case there are multiple bio nodes, defaults to order by nid ASC.
  ctools_include('node', 'os');

  $query = new OSNodeFieldQuery($type);
  $query->propertyOrderBy('nid');

  $result = $query->execute();

  if (!isset($result['node']) || !sizeof($result['node'])) {
    return FALSE;
  }

  $item = array_shift($result['node']);
  $node = node_load($item->nid);
  return $node;
}

/**
 * Returns TRUE if Bio node exists.
 *
 * @see os_biocv_menu_alter()
 * @see os_biocv_os_add_new_links_alter()
 */
function _os_biocv_bio_exists() {
  $node = os_biocv_get_bio_node();
  return (bool)($node !== FALSE);
}

/**
 * Returns TRUE if CV node exists.
 *
 * @see os_biocv_menu_alter()
 * @see os_biocv_os_add_new_links_alter()
 */
function _os_biocv_cv_exists() {
  $node = os_biocv_get_cv_node();
  return (bool)($node !== FALSE);
}

/**
 * Page callback; renders a Bio node with optional CV link.
 */
function _os_biocv_bio_page_contents() {
  $output = array();

  // Optionally adds CV download link.
  if (!_os_biocv_show_local_tasks()) {
    $cv_node = os_biocv_get_cv_node();
    if ($cv_node) {
      $cv_filepath = _os_biocv_get_cv_filepath($cv_node);
      if ($cv_filepath) {
        $output['cv'] = array(
         '#markup' => "<h3 class='cv-direct-download'>".t("Download CV: ") . l('PDF', $cv_filepath) . "</h3>",
        );
        // Prompts admin user to edit CV PDF upload.
        if (_os_biocv_access_admin()) {
          //$edit_link = l(t('Remove or replace your CV'), "node/{$cv_node->nid}/edit");
          //$output['cv']['#markup'] .= $edit_link;
        }
      }
      // Prompts admin user to upload a CV PDF if they have a CV node without a PDF.
      else {
        //$upload_link = l(t('Upload a PDF do display as your CV'), "node/{$cv_node->nid}/edit");
        //$output['cv']['#markup'] .= $upload_link;
      }
    }
  }
  // Loads the Bio node
  $node = os_biocv_get_bio_node();
  if ($node) {
    if (empty($node->body) && _os_biocv_access_admin()) {
      // Spoofs a node body in order to    contextual links, etc.
      // Note: this makes no changes to the bio node because we don't save it.
      $markup = '<p>' . t('Oops! Nothing to show here yet.') . ' ' . l(t('Add some text to your bio'), "node/{$node->nid}/edit") . '</p>';
      $node->body['und'] = array(
        array(
          'value' => $markup,
          'summary' => '',
          'format' => 'filtered_html',
          'safe_value' => $markup,
          'safe_summary' => '',
        ),
      );
    }
    drupal_set_title($node->title);
    $output['node'] = node_view($node, 'full');
  }
  else if (_os_biocv_access_admin()) {
    $output['node'] = array();
    $output['node']['#markup'] = t('Oops! Nothing to show here yet.') . ' ' . l(t('Create a bio post now'), 'node/add/bio');
  }
  return $output;
}

/**
 *
 */
function _os_biocv_cv_page_contents() {
  if (!_os_biocv_show_local_tasks()) {
    return '';
  }
  $output = '';

  if (_os_biocv_access_admin()) {
    $links = array();
    $node = os_biocv_get_cv_node();
    if ($node !== FALSE) {
      $links[] = array(
        'title' => 'Edit your CV',
        'href' => "node/{$node->nid}/edit",
        'query' => drupal_get_destination(),
      );
    }
    else {
      // an appropriate message and a link for the user to create their CV
      $links[] = array(
        'title' => 'Add your CV',
        'href' => "node/add/cv",
        'query' => drupal_get_destination(),
      );
    }

    $vars['links'] = $links;
    $vars['attributes'] = array('class' => 'links _os_biocv_cv_page_contents');
    $output .= theme('links', $vars);
  }

  $node = os_biocv_get_cv_node();

  if ($node === FALSE) {
    return $output;
  }
  drupal_set_title($node->title);

  // Removes duplicate title (linking to node) because it's already the page title.
  $node->title = '';
  $output .= render(node_view($node, 'full', TRUE, TRUE));
  return $output;
}

/**
 * Returns the filepath for PDF download of given CV node, or FALSE if none.
 *
 * @see os_biocv_settings()
 */
function _os_biocv_get_cv_filepath($node) {
  if ($node === FALSE) {
    return FALSE;
  }
  $field_name = 'field_biocv_pdf_upload';
  $items = field_get_items('node', $node, $field_name);
  if (!isset($items[0]['uri']) || strlen($items[0]['uri']) < 1) {
    return FALSE;
  }
  $filepath = file_create_url($items[0]['uri']);
  return $filepath;
}

/**
 * Returns TRUE if user has selected to display Bio/CV as two separate sections.
 */
function _os_biocv_show_local_tasks() {
  return ((int)variable_get('os_biocv_use_pdf_as_cv', 0) === 0);
}

/**
 *
 */
function _os_biocv_access_admin() {
  if (module_exists('spaces')) {
    return spaces_access_admin();
  }
  return user_access('administer site configuration');
}

/**
 * Get bio and cv data, add to data array and return
 */
function _get_vsite_biocv_data() {
  $query = db_select('og_membership', 'ogm')
    ->condition('ogm.entity_type', 'node', '=');
  $query->innerJoin('node', 'n', "ogm.etid = n.nid AND (n.type = 'cv' OR n.type = 'bio') AND n.status = 1");
  $query->leftJoin('field_data_body', 'body', 'n.nid = body.entity_id AND body.deleted <> 1 AND n.vid = body.revision_id');
  $query->leftJoin('field_data_field_biocv_pdf_upload', 'pdf', 'n.nid = pdf.entity_id');
  $query->leftJoin('spaces_overrides', 'so', "so.id = ogm.gid AND so.object_type='variable' AND so.object_id = 'os_biocv_use_pdf_as_cv'");
  $query = $query->fields('ogm', array('gid'))
                 ->fields('n', array('nid','title', 'uid', 'type'))
                 ->fields('body', array('body_value'))
                 ->fields('pdf', array('field_biocv_pdf_upload_fid'))
                 ->fields('so', array('value'));
  $query->addExpression('MIN(n.created)');
  $query->groupBy('ogm.gid');
  $query->groupBy('n.type');
  $results = $query->execute();

  $vsites = array();
  while ($row = $results->fetchObject()) {
    if($row->gid) {
      if (!isset($vsites[$row->gid . ".0"])) {
        $values = array();
      }
      else {
        $values = $vsites[$row->gid . ".0"];
      }
      if($row->type == "bio") {
        $values['uid'] = $row->uid;
        $values['bio_nid'] = $row->nid;
        _os_biocv_set_not_empty($values, 'bio_title', $row->title);
        _os_biocv_set_not_empty($values, 'bio_body', $row->body_value);

        // figure out if vsite was set up to display Bio & CV as tabs
        switch($row->value) {
          case 'b:1;':
            $setting = 0;
            break;
          case 'i:1;':
            $setting = 0;
            break;
          case 's:1:"1";':
            $setting = 0;
            break;
          case 'i:0;':
            $setting = 1;
            break;
          case 's:1:"0";':
            $setting = 1;
            break;
          case 's:4:"b:0;";':
            $setting = 1;
            break;
          default:
            $setting = 1;
        }
        $values['tabs'] = $setting;
        $vsites[$row->gid . ".0"] = $values;
      }
      else {
        $values['cv_nid'] = $row->nid;
        _os_biocv_set_not_empty($values, 'cv_title', $row->title);
        _os_biocv_set_not_empty($values, 'cv_body', $row->body_value);
        _os_biocv_set_not_empty($values, 'cv_fid', $row->field_biocv_pdf_upload_fid);

        if (!isset($values['uid'])) {
          $values['uid'] = $row->uid;
        }
        $vsites[$row->gid . ".0"] = $values;
      }
    }
  }
  return $vsites;
}

/**
 * converts all used bio & cv content nodes to pages;
 * converts bio widget instances into Featured Posts widget with "Hide Titles" checked
 */
function _replace_biocvs_with_pages($vsite_data) {
  $output = "";
  foreach ($vsite_data as $gid => $vsite_values) {
    $gid = (int)$gid;
    $vsite_obj = vsite_get_vsite($gid);
    if (!$vsite_values['uid']) {
      $vsite_values['uid'] = 1;
    }

    // prepare body content for bio page
    $bio_body = isset($vsite_values['bio_body']) ? $vsite_values['bio_body'] : "";

    // if user has cv content, add link to either cv page or cv file
    $cv_link = "";
    if (isset($vsite_values['cv_body']) || isset($vsite_values['cv_fid'])) {
      if ($vsite_values['tabs'] && isset($vsite_values['cv_body'])) {
        $cv_link = '<p><a href="/' . $vsite_obj->group->purl . '/biocv/cv">Curriculum Vitae</a></p>';
      }
      elseif (isset($vsite_values['cv_fid'])) {
        // add link to CV file and attach file to vsite so that when CV node is deleted, the file won't be
        $cv_file_obj = file_load($vsite_values['cv_fid']);
        if ($cv_file_obj === FALSE) {
          $output .= "Unable to load cv file object for vsite [" . $gid . "].";
          continue;
        }
        else {
          $public_file_path = variable_get('file_public_path', conf_path() . '/files');
          $cv_link = '<p><a href="/' . str_replace("public:/", $public_file_path, $cv_file_obj->uri) . '">Curriculum Vitae</a></p>';
          file_usage_add($cv_file_obj, "os_files", "node", $gid);
        }
      }
    }

    // create bio page node
    $bio_body = $cv_link . $bio_body;
    $bio_body_options = array(
      'body' => array(
        'value' => $bio_body,
        'format' => 'full_html',
      ),
    );
    $vsite_values['bio_title'] = isset($vsite_values['bio_title']) ? $vsite_values['bio_title'] : "Bio";

    $bio_node = os_create_node($vsite_values['bio_title'], 'page', $vsite_values['uid'], NULL, $bio_body_options);
    if (!$bio_node) {
      $output .= "Unable to create bio page for vsite " . $gid . ".";
      continue;
    }

    // Add the new page to the vsite
    vsite_add_node($bio_node, $gid);

    // Get primary menu info for bio cv link
    $bio_menu = array();
    foreach (_vsite_menu_get_menu_links('primary-menu',  $vsite_obj) as $mlid => $menu_item) {
      if ($menu_item['link_path'] == "biocv") {
        $bio_menu = $menu_item;
        break;
      }
    }

    // get all bio nodes associated with vsite and then delete them and their url aliases
    $query = db_select('node', 'n')
      ->condition('n.type', 'bio', '=')
      ->fields('n', array('nid'));
    $query->innerJoin('og_membership', 'ogm', "n.nid = ogm.etid AND gid = $gid AND entity_type = 'node'");
    $all_bio_nids = $query->execute()->fetchAllKeyed($key_index = 0, $value_index = 0);
    node_delete_multiple(array_keys($all_bio_nids));
    foreach ($all_bio_nids as $nid) {
      path_delete($nid);
    }

    // give the new page the right url alias
    $path = array(
      "source" => "node/" . $bio_node->nid,
      "alias" => $vsite_obj->group->purl . "/biocv"
    );
    path_save($path);

    // create new menu item for bio page node
    if (count($bio_menu)) {
      $new_bio_menu = array(
        "menu_name" => $bio_menu['menu_name'],
        "router_path" => "node/%",
        "options" => $bio_menu['options'],
        "weight" => $bio_menu['weight'],
        "module" => $bio_menu['module'],
        "hidden" => $bio_menu['hidden'],
        "external" => $bio_menu['external'],
        "plid" => $bio_menu['plid'],
      );
      $mlid = vsite_menu_create_menu_link($bio_menu['link_title'], 'node/' . $bio_node->nid, $gid, $bio_menu['plid'], $new_bio_menu);
    }

    // attach cv file to bio node if there will be no CV node to attach it to
    if (isset($vsite_values['cv_fid']) && $bio_node && !isset($vsite_values['cv_nid'])) {
      file_usage_add($cv_file_obj, "os_files", "node", $bio_node->nid);
    }

    // get all cv nodes associated with vsite
    $query = db_select('node', 'n')
      ->condition('n.type', 'cv', '=')
      ->fields('n', array('nid'));
    $query->innerJoin('og_membership', 'ogm', "n.nid = ogm.etid AND gid = $gid AND entity_type = 'node'");
    $all_cv_nids = $query->execute()->fetchAllKeyed($key_index = 0, $value_index = 0);

    // create cv page (if necessary)
    if ($vsite_values['tabs'] && isset($vsite_values['cv_nid'])) {
      $cv_body = "";
      if(isset($vsite_values['cv_body'])) {
        $cv_body = $vsite_values['cv_body'];
      }
      if(isset($vsite_values['cv_fid'])) {
        $old_cv_node = node_load($vsite_values['cv_nid']);
        $cv_display = array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'file_default',
        );
        $cv_body .= render(field_view_field('node', $old_cv_node, 'field_biocv_pdf_upload', $cv_display, LANGUAGE_NONE));
      }
      $cv_body_options = array(
        'body' => array(
          'value' => $cv_body,
          'format' => 'full_html',
        ),
      );

      $cv_node = os_create_node($vsite_values['cv_title'], 'page', $vsite_values['uid'], NULL, $cv_body_options);
      if (!$cv_node) {
         $output .= "Unable to create cv page for vsite " . $gid . ".";
         continue;
      }

      // Add the new page to the vsite, delete all old CV nodes and url aliases
      // and then give the new page the right url alias
      vsite_add_node($cv_node, $gid);
      node_delete_multiple(array_keys($all_cv_nids));
      foreach ($all_cv_nids as $nid) {
        path_delete($nid);
      }

      // give the new page the right url alias
      $path = array(
        "source" => "node/" . $cv_node->nid,
        "alias" => $vsite_obj->group->purl . "/biocv/cv"
      );
      path_save($path);

      if (isset($vsite_values['cv_fid']) && $cv_node && $vsite_values['tabs']) {
        file_usage_add($cv_file_obj, "os_files", "node", $cv_node->nid);
      }
    }
    elseif (isset($vsite_values['cv_nid'])) {
      node_delete_multiple(array_keys($all_cv_nids));
      foreach ($all_cv_nids as $nid) {
        path_delete($nid);
      }
    }

    // find out if this vsite has a customized instance of the bio widget
    $query = db_select('spaces_overrides', 'so');
    $or = db_or();
    $or->condition("so.value",'%bio_teaser%', 'like');
    $or->condition("so.value",'%os_boxes_bio%', 'like');
    $query->condition($or);
    $query->condition("id", $gid, "=");
    $query = $query->fields('so', array('object_type', 'object_id', 'value'))
                   ->orderBy('so.object_type', 'ASC');
    $results = $query->execute();

    // set flag to track whether or not new bio widget has been created
    $bio_widget_created_flag = 0;
    // the user has changed the default display for the bio widget
    if ($results->rowCount()) {
      $existing_bio_widget = NULL;
      while ($row = $results->fetchObject()) {
        // if user has a bio_teaser entry, save settings for when/if the new bio widget is created
        if($row->object_id == "bio_teaser") {
          $existing_bio_widget = unserialize($row->value);
        }
        else {
          $row_values = unserialize($row->value);
          foreach ($row_values as $value => $instances) {
            if(is_array($instances)) {
              foreach ($instances as $type => $data) {
                if (is_array($data) && ((isset($data['plugin']) && $data['plugin'] == "os_boxes_bio") || $data['delta'] == "bio_teaser")) {
                  $transaction = db_transaction();
                  try {
                    // replace implemented bio widget with new featured posts widget
                    if($data['region']) {
                      if($existing_bio_widget) {
                        $vsite_values['bio_options'] = $existing_bio_widget->options;
                      }
                      $featured_delta = _os_biocv_create_bio_featured_posts_widget($gid, $vsite_values, $bio_node->nid, $bio_widget_created_flag);

                      $box_position = array(
                        "region" => $data['region'],
                        "weight" => $data['weight'],
                        "module" => $data['module'],
                        "delta" => $featured_delta,
                        "status" => 0,
                        "title" => NULL,
                      );

                      $instances["boxes-" . $featured_delta] = $box_position;
                    }
                  // remove entry in serialized array for bio widget and update database entry
                  unset($instances[$type]);
                  db_update('spaces_overrides')
                    ->fields(array('type' => 'og', 'id' => $gid, 'object_type' => $row->object_type, 'object_id' => $row->object_id, 'value' => serialize(array($value => $instances))))
                    ->condition('id', $gid, "=")
                    ->condition('object_id', $row->object_id, "=")
                    ->condition('object_type', $row->object_type, "=")
                    ->execute();

                  // delete instance of bio widget
                  db_delete('spaces_overrides')
                    ->condition('id', $gid, "=")
                    ->condition('object_id', "bio_teaser", "=")
                    ->condition('object_type', "boxes", "=")
                    ->execute();
                  }
                  catch (Exception $e) {
                    $transaction->rollback();
                    $output .= "DB transaction error trying to replace bio widget with featured posts widget: " . $e->getMessage() . "\n";
                    throw $e;
                  }
                }
              }
            }
          }
        }
      }
    }
    // the user hasn't changed the default display,
    // but we still need to add in the featured posts bio widget
    else {
      $featured_delta = _os_biocv_create_bio_featured_posts_widget($gid, $vsite_values, $bio_node->nid, $bio_widget_created_flag);
    }
  }
  return $output;
}

/**
 * helper function to make the distinction between a field
 * with only whitespace, HTML tags and/or HTML entities in it
 * and actual content and only set an indexed array value
 * if there is actual content
 */
function _os_biocv_set_not_empty(&$array, $key, $value) {
  $pattern = '/\s/';
  if (preg_replace($pattern, "", html_entity_decode(strip_tags($value))) != "") {
    $array[$key] = $value;
  }
}

/**
 * helper function to create the featured posts object the replaces the bio widget
 */
function _os_biocv_create_bio_featured_posts_widget($vsite_id, $vsite_values, $bio_nid, &$bio_widget_created) {
  $featured_delta = "og-" . $vsite_id . "-" . substr(md5(time()), -8);
  $featured_box = new stdClass();
  $featured_box->changed = NULL;
  $featured_box->delta = $featured_delta;
  $featured_box->title = NULL;
  $featured_box->description = "Bio";
  $featured_box->options = array(
    "make_embeddable" => 0,
    "nodes" => array(array("nid" => $bio_nid, "title" => $vsite_values['bio_title'])),
    "random" => 0,
    "additional_classes" => NULL,
    "hide_title" => 1
  );
  $featured_box->embed_as = array("iframe", "oembed");
  $featured_box->plugin_key = "os_boxes_manual_list";

  if(isset($vsite_values['bio_options']) && isset($vsite_values['bio_options']['teaser']) && ($vsite_values['bio_options']['teaser'] != "full")) {
    $featured_box->options['style'] = "teasers";
  }
  else {
    $featured_box->options['style'] = "full";
  }

  try {
    if (!$bio_widget_created) {
      db_insert('spaces_overrides')
        ->fields(array('type' => 'og', 'id' => $vsite_id, 'object_type' => 'boxes', 'object_id' => $featured_delta, 'value' => serialize($featured_box)))
        ->execute();
      $bio_widget_created = 1;

      // if an os_front context doesn't exist for this vsite, create one
      $query = db_select('spaces_overrides', 'so')->fields('so');
      $query->condition('so.object_type','context', '=');
      $query->condition('so.object_id','os_front:reaction:block', '=');
      $query->condition('so.id', $vsite_id, '=');
      $results = $query->execute();

      if (!$results->rowCount()) {
        $box_position = array(
          "region" => 'content_top',
          "weight" => '-10',
          "module" => "boxes",
          "delta" => $featured_delta,
          "status" => 0,
          "title" => NULL,
        );

        db_insert('spaces_overrides')
          ->fields(array('type' => 'og', 'id' => $vsite_id, 'object_type' => 'context', 'object_id' => 'os_front:reaction:block', 'value' => serialize(array('blocks' => array("boxes-" . $featured_delta => $box_position)))))
          ->execute();
      }
    }
    return $featured_delta;
  }
  catch (Exception $e) {
    throw new Exception("DB error trying to create featured posts bio widget: " . $e->getMessage());
    return FALSE;
  }
}
